#These are the algorithms entered into postman to generate the content for the algo page!
{
    "title": "Acronyms",
    "description": "Turn each incoming sentence string into an acryonym",
    "sampleInput": "Live From Saturday Night Live",
    "sampleOutput": "LFSNL"
}
id: 6064c162716ebc67001f80b7

{
    "title": "String Reverse",
    "description": "Given a string, return the string reversed.",
    "sampleInput": "var str = 'Hello'",
    "sampleOutput": "OLLEH"
}

6064c5cad9b7f3c440c8fcd2

{
    "title": "Brace Yourself",
    "description": "RETURN TRUE OR FALSE ON WHETHER THE STRING HAS APPROPRIATE CLOSING AND OPENING BRACES.",
    "sampleInput": "var str = '()(())', var str2 = '(()()', var str3 = '()()()', var str4='())(()'",
    "sampleOutput": "TRUE, FALSE, TRUE, FALSE"
}

id: 6064c894d9b7f3c440c8fcd3

{
    "title": "Is it a Palindrome?",
    "description": "RETURN TRUE OR FALSE DEPENDING ON WHETHER THE WORD IS A PALINDROME",
    "sampleInput": "var str1 = 'hello', var str2 = 'kayak', var str3 = 'tacocat'",
    "sampleOutput": "FALSE, TRUE, TRUE"
}

ID: 6064c914d9b7f3c440c8fcd4

{
    "title": "Is it an anagram?",
    "description": "RETURN TRUE OR FALSE DEPENDING ON WHETHER THE TWO WORDS ARE ANAGRAMS",
    "sampleInput": "1. var str1 = 'ate', var str2 = 'tea' 2. var str1 = 'listen', var str2 = 'silenz",
    "sampleOutput": "TRUE, FALSE"
}

id: 6064c9a2d9b7f3c440c8fcd5

{
    "title": "Book Index",
    "description": "GIVEN AN ARRAY OF BOOK PAGE NUMBERS RETURN INDEXED VERSION STRING OF BOOK PAGES",
    "sampleInput": "var arr = [1,13,14,15,16,17,36,37,38,70]",
    "sampleOutput": "['1', '13-17', '36-38', '70']"
}

id: 6064ca35d9b7f3c440c8fcd6

{
    "title": "Minimum Coin Change",
    "description": "GIVEN A NUMBER FIND THE LEAST AMOUNT OF COINS YOU CAN USE TO HAVE THE SAME AMOUNT",
    "sampleInput": "var num = 321",
    "sampleOutput": "12 QUARTERS, 2 DIMES, 1 PENNY"
}

{
    "title": "Invert that object",
    "description": "GIVEN AN OBJECT WITH KEY VALUE PAIRS, RETURN A DICTIONARY WITH THE KEYS AND VALUE SWAPPED",
    "sampleInput": "var obj = {'A': 'ONE', 'B': 'TWO', 'C': 'THREE'}",
    "sampleOutput": "{'ONE': 'A', 'TWO': 'B', 'THREE': '3' }"
}

{
    "title": "Two Num Sum",
    "description": "Given two Arrays, return an array filled with the sum of each combination of numbers from the arrays. Assume the arrays are the same length",
    "sampleInput": "var arr1 = [1,2,3] , var arr2 = [4,5,6]",
    "sampleOutput": "[5,6,7,6,7,8,7,8,9]"
}

{
    "title": "Binary Search",
    "description": "Given a sorted array and a value, return whether that array contains the value. Do not sequentially iterate the array. Instead, divide and conquer, taking advantage of the fact that the array is sorted.",
    "sampleInput": "var arr1 = [-1,0,1,2,3,4,5,6,7,8,9,10,12,14,15,16,100,110], var target = 110",
    "sampleOutput": "true"
}

{
    "title": "Rising Square",
    "description": "Given a number, return an array filled with the squares of integers up to the given number",
    "sampleInput": "var num = 6",
    "sampleOutput": "[ 1, 4, 9, 16, 25, 36 ]"
}

{
    "title": "String Subset",
    "description": "Given a string, return an array filled with an IN-ORDER substrings",
    "sampleInput": "var str = 'ABC'",
    "sampleOutput": "['ABC', 'AB', 'A', 'BC', 'B', 'C', '']"
}

{
    "title": "Bubble Sort",
    "description": "For every pair of adjacent indicies, swap them if the item on the left is larger than the item on the right until array is fully sorted.",
    "sampleInput": "var arr = [5,2,3,4,1]",
    "sampleOutput": "[1,2,3,4,5]",
    "sampleInput2": "var arr2 = [9,10,1,-2,5]",
    "sampleOutput2": "[-2,1,5,9,10]"
}

{
    "title": "Selection Sort",
    "description": "Selection sort works by iterating through the list, finding the minimum value, and moving it to the beginning of the list. Then, ignoring the first position, which is now sorted, iterate through the list again to find the next minimum value and move it to index 1. This continues until all values are sorted.",
    "sampleInput": "var arr = [5,2,3,4,1]",
    "sampleOutput": "[1,2,3,4,5]",
    "sampleInput2": "var arr2 = [9,10,1,-2,5]",
    "sampleOutput2": "[-2,1,5,9,10]"
}

{
    "title": "Insertion Sort",
    "description": "Insertion sort splits the array into two portions, the left portion becomes sorted and the right portion is unsorted.",
    "sampleInput": "var arr = [5,2,3,4,1]",
    "sampleOutput": "[1,2,3,4,5]",
    "sampleInput2": "var arr2 = [9,10,1,-2,5]",
    "sampleOutput2": "[-2,1,5,9,10]"
}

{
    "title": "Ordered Intersection",
    "description": "Efficiently combine two already sorted multiset arrays into an array containing the sorted set intersection of the two Output: only the shared values between the two arrays (deduped).",
    "sampleInput": "var arr = [1,4,5,7,7,8,9,9,10,12], var arr2 = [2,3,3,6,7,9,9,9,11,13]",
    "sampleOutput": "[7,9]"
}

{
    "title": "Diagonal Difference",
    "description": "    Given a square matrix (2d array) of integers Calculate the absolute difference between the sums of its diagonals - top left to bottom right diagonal - top right to bottom left diagonal",
    "sampleInput": "let nums = [ [ 1, 2, 3 ], [ 5, 3, 2 ], [ 9, 7, 1 ] ]",
    "sampleOutput": "10"
}

{
    "title": "Ordered Mutliset Union",
    "description": "Union Sorted Arrays - Efficiently combine two already-sorted multiset arraysinto a new sorted array containing the multiset union. Unions by default will take the set of dupes that has the highest occurrences from one array.",
    "sampleInput": "let nums1 = [1, 3, 3, 4, 5, 5, 5 ]; let nums2 = [2, 3, 5, 6, 6, 7, 9 ];",
    "sampleOutput": "[1, 2, 3, 3, 4, 5, 5, 5, 6, 6, 7, 9]"
}